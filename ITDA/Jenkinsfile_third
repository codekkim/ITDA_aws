pipeline {
    environment { 
        repository = "siyeonkim/security"
        DOCKERHUB_CREDENTIALS = credentials('dockerhub')
        TARGET_HOST = "ubuntu@3.81.5.141"
    }
    agent any

    tools {
        maven "maven"
    }

    stages {
        stage('Git Pull') {
            steps {
                git branch: 'main', credentialsId: 'github', url: 'https://github.com/htakimsean/ITDA_aws.git'
            }
            post {
                success { 
                    sh 'echo "Successfully Cloned Repository"'
                }
                failure {
                    sh 'echo "Fail Cloned Repository"'
                    exit 1
                }
            }    
        }

        stage('Build') {
            steps {    
                dir("ITDA"){
                    sh "mvn -DskipTests  clean package"
                }  
            }
            post {
                success {
                    echo 'maven build success'
                }

                failure {
                    echo 'maven build failed'
                    exit 1
                }
            } 
        }

        stage('Dockerizing'){
            steps{
                dir("ITDA"){
                    sh 'echo " Image Bulid Start"'
                    sh 'docker build . -t $repository:$BUILD_NUMBER'
                }
            }
            post {
                success {
                    sh 'echo "Bulid Docker Image Success"'
                }

                failure {
                    sh 'echo "Bulid Docker Image Fail"'
                    exit 1
                }
            }
        }
    
        stage('Login'){
            steps{
                sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
            }
            
            post {
                success {
                    sh 'echo "Docker Login Success"'
                }

                failure {
                    sh 'echo "Docker Login Fail"'
                    exit 1
                }
            }
        }

        stage('Docker hub push'){
            steps{
                sh 'echo " docker hub push"'
                sh 'docker push  $repository:$BUILD_NUMBER'
            }
            post {
                success {
                    sh 'echo "Docker hub push Success"'
                }

                failure {
                    sh 'echo "Docker hub push Fail"'
                    exit 1
                }
            }
        }    

        stage('Cleaning up'){
            steps{
                sh 'echo " docker image rmi"'
                sh "docker rmi $repository:$BUILD_NUMBER"
            }
            post {
                success {
                    sh 'echo "Docker hub push Success"'
                }

                failure {
                    sh 'echo "Docker hub push Fail"'
                    exit 1
                }
            }
        }    

        stage('multiline ssh') {
            steps {        
                sshagent (credentials: ['deploy-ec2']) {
                    sh """
                        ssh -o StrictHostKeyChecking=no ${TARGET_HOST} '
                        sudo docker-compose up -d
                        '
                    """
                }
            }
        }
    }
}
